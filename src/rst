#!/usr/bin/env bash

trap 'sync' EXIT

readonly progrm=${0##*/}

eprintf() { printf "$@" 1>&2; }

panic() {
	eprintf '%s\n' "$progrm: $2"
	(( $1 )) && exit $1
}

usage() {
	read -d '' <<-EOF
		Usage: $progrm [OPTIONS]...

		  -h, --help      - Displays this help information.
		  -f, --force     - Allow root to run $progrm(1).
		  -y, --yes       - Answers 'yes' to all questions.

	EOF
	printf '%s' "$REPLY"
}

while [[ $1 ]]; do
	case $1 in
		-h|--help)
			usage
			exit 0 ;;

		-f|--force)
			readonly force=true ;;

		-y|--yes)
			readonly yes=true ;;

		*)
			panic 1 "$1: invaild option..." ;;
	esac
	shift
done

if [[ $UID -eq 0 && ! $force ]]; then
	panic 1 'denied to run as root...'
fi

ask_to_rm() {
	local clear=true
	until [[ $yes == true ]]; do
		read -p "Do you want to clear $1? [Y/n]: "
		case ${REPLY,,} in
			yes|y|'')
				break ;;

			no|n)
				unset -v clear
				break ;;

			*)
				panic 0 "$REPLY: invaild reply..." ;;
		esac
	done
	shift
	[[ $clear == true ]] && rm -rf -- "$@"
}

for cache in "$HOME"/.cache/*; {
	[[ -e $cache ]] && ask_to_rm cache "$HOME"/.cache/*
	unset -v cache
	break
}

ff_dir=$HOME/.mozilla/firefox
ff_crash=$ff_dir/Crash\ Reports ff_ping=$ff_dir/Pending\ Pings

if [[ -d $ff_crash || -d $ff_ping ]]; then
	ask_to_rm "Firefox's reports" "$ff_crash" "$ff_ping"
fi
unset -v ff_dir ff_crash ff_ping

viminfo=$HOME/.viminfo vim_netr=$HOME/.vim/.netrwhist

if [[ -f $viminfo || -f $vim_netr ]]; then
	ask_to_rm "Vim's cache" "$viminfo" "$vim_netr"
fi
unset -v vim_info vim_netr

nvim_shada=${XDG_DATA_HOME:=$HOME/.local/share}/nvim/shada/main.shada
nvim_netr=$XDG_DATA_HOME/nvim/shada/.netrwhist

if [[ -f $nvim_shada || -f $nvim_netr ]]; then
	ask_to_rm "Neovim's cache" "$nvim_shada" "$nvim_shada"
fi
unset -v nvim_shada nvim_netr
