#!/usr/bin/env bash

trap 'sync' EXIT

progrm=${0##*/}

Err() {
	printf '%s\n' "$progrm: $2" 1>&2
	(( $1 > 0 )) && exit $1
}

while [[ -n $1 ]]; do
	case $1 in
		-h|--help)
			read -d '' <<-EOF
				Usage: $progrm [OPTION]...

				  -h, --help      - Displays this help information.
				  -f, --force     - Allow 'root' to run $progrm(1).
				  -y, --yes       - Answers 'yes' to all questions.

			EOF

			printf '%s' "$REPLY"
			exit 0 ;;

		-f|--force)
			force=true ;;

		-y|--yes)
			yes=true ;;

		*)
			Err 1 "$1: invaild option..." ;;
	esac
	shift
done

if [[ $UID -eq 0 && -z $force ]]; then
	Err 1 'denied to run as root...'
fi

Ask() {
	local clear=true
	until [[ $yes == true ]]; do
		read -p "Do you want to clear $1? [Y/n]: "
		case ${REPLY,,} in
			yes|y|'')
				break ;;

			no|n)
				unset -v clear
				break ;;

			*)
				Err 0 "$REPLY: invaild reply..." ;;
		esac
	done
	shift
	[[ $clear == true ]] && rm -rf -- "$@"
}

for cache in "$HOME"/.cache/*; {
	[[ -e $cache ]] || unset -v cache
	break
}

if [[ $cache ]]; then
	Ask cache "$HOME"/.cache/*
	unset -v cache
fi

ff_dir=$HOME/.mozilla/firefox
ff_crash=$ff_dir/Crash\ Reports ff_ping=$ff_dir/Pending\ Pings

if [[ -d $ff_crash || -d $ff_ping ]]; then
	Ask "Firefox's reports" "$ff_crash" "$ff_ping"
fi

unset -v ff_dir ff_crash ff_ping

vim_info=$HOME/.viminfo vim_netr=$HOME/.vim/.netrwhist

if [[ -f $vim_info || -f $vim_netr ]]; then
	Ask "Vim's cache" "$vim_info" "$vim_netr"
fi

unset -v vim_info vim_netr

nvim_shada=${XDG_DATA_HOME:-$HOME/.local/share}/nvim/shada/main.shada

if [[ -f $nvim_shada ]]; then
	Ask "Neovim's cache" "$nvim_shada"
fi

unset -v nvim_shada
