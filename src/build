#!/usr/bin/env bash

progrm=${0##*/}
src_dir=$HOME/.local/src

panic() {
	printf '%s\n' "$progrm: $2" 1>&2
	(( $1 > 0 )) && exit $1
}

((UID)) || panic 1 'denied to run as root...'

for dep in git makepkg; {
	if ! type -P "$dep" &>/dev/null; then
		panic 0 "dependency, \`$Dep\`, not met..."
		(( dep_err++ ))
	fi
}

(( dep_err )) && panic 1 "$dep_err dependency(s) missing, aborted..."
unset -v dep_err

[[ -d $src_dir ]] || mkdir -p -- "$src_dir"

if [[ -z $1 ]]; then
	panic 0 'no argument were given...'
	printf '%s\n' "See \`$progrm --help\` for usage." 1>&2
	exit 1
fi

while [[ -n $1 ]]; do
	case $1 in
		-h|--help)
			read -d '' <<-EOF
				Usage: $progrm [OPTION/AUR]
				To remove the AUR, use \`pacman -Rns \$AUR\`.

				  -h, --help        - Display this help infomation.
				  -C, --check       - Check AUR's if up to date or not.

			EOF

			printf '%s' "$REPLY"
			exit 0 ;;

		-C|--check)
			for aur in "$src_dir"/*/PKGBUILD; {
				aur=${aur%/*}

				printf '%s' "${aur##*/}: "
				git -C "$aur" pull

				printf '\n'
			}

			exit 0 ;;

		--)
			shift
			break ;;

		-*)
			panic 1 "$1: invaild option..." ;;

		*)
			break ;;
	esac
	shift
done

(( $# > 1 )) && panic 1 "can't build multiple AUR's at a time..."

if [[ -d $1 ]]; then
	aur=$1
else
	url=https://aur.archlinux.org/$1
	aur=$src_dir/$1

	if [[ -d $aur ]]; then
		git -C "$aur" pull -q
	else
		panic 0 "'$1' not found, use \`git clone\` instead..."
		git clone -q "$url" "$aur" || panic 1 'failed to use `git clone`...'
	fi

	unset -v url
fi

temp_dir=${TMPDIR:-/tmp}/build-$SRANDOM

cp -r -- "$aur" "$temp_dir" || panic 1 'failed to copy the AUR to temp directory...'

trap "rm -rf -- $temp_dir; sync" EXIT

(cd -- "$temp_dir" && makepkg -sir) || panic 1 "failed to build '$1'..."
